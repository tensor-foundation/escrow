/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';

export type MarginAccount<TAddress extends string = string> = Account<
  MarginAccountAccountData,
  TAddress
>;

export type MaybeMarginAccount<TAddress extends string = string> = MaybeAccount<
  MarginAccountAccountData,
  TAddress
>;

export type MarginAccountAccountData = {
  discriminator: Array<number>;
  owner: Address;
  name: Uint8Array;
  nr: number;
  bump: Array<number>;
  poolsAttached: number;
  reserved: Uint8Array;
};

export type MarginAccountAccountDataArgs = {
  owner: Address;
  name: Uint8Array;
  nr: number;
  bump: Array<number>;
  poolsAttached: number;
  reserved: Uint8Array;
};

export function getMarginAccountAccountDataEncoder(): Encoder<MarginAccountAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['owner', getAddressEncoder()],
      ['name', getBytesEncoder({ size: 32 })],
      ['nr', getU16Encoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['poolsAttached', getU32Encoder()],
      ['reserved', getBytesEncoder({ size: 64 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [133, 220, 173, 213, 179, 211, 43, 238],
    })
  );
}

export function getMarginAccountAccountDataDecoder(): Decoder<MarginAccountAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['owner', getAddressDecoder()],
    ['name', getBytesDecoder({ size: 32 })],
    ['nr', getU16Decoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['poolsAttached', getU32Decoder()],
    ['reserved', getBytesDecoder({ size: 64 })],
  ]);
}

export function getMarginAccountAccountDataCodec(): Codec<
  MarginAccountAccountDataArgs,
  MarginAccountAccountData
> {
  return combineCodec(
    getMarginAccountAccountDataEncoder(),
    getMarginAccountAccountDataDecoder()
  );
}

export function decodeMarginAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): MarginAccount<TAddress>;
export function decodeMarginAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeMarginAccount<TAddress>;
export function decodeMarginAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): MarginAccount<TAddress> | MaybeMarginAccount<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMarginAccountAccountDataDecoder()
  );
}

export async function fetchMarginAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MarginAccount<TAddress>> {
  const maybeAccount = await fetchMaybeMarginAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMarginAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeMarginAccount<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMarginAccount(maybeAccount);
}

export async function fetchAllMarginAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MarginAccount[]> {
  const maybeAccounts = await fetchAllMaybeMarginAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMarginAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeMarginAccount[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMarginAccount(maybeAccount));
}

export function getMarginAccountSize(): number {
  return 143;
}
