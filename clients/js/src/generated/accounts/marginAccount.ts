/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/web3.js';
import { MarginAccountSeeds, findMarginAccountPda } from '../pdas';

export type MarginAccount = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  name: ReadonlyUint8Array;
  nr: number;
  bump: Array<number>;
  poolsAttached: number;
  reserved: ReadonlyUint8Array;
};

export type MarginAccountArgs = {
  owner: Address;
  name: ReadonlyUint8Array;
  nr: number;
  bump: Array<number>;
  poolsAttached: number;
  reserved: ReadonlyUint8Array;
};

export function getMarginAccountEncoder(): Encoder<MarginAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['name', fixEncoderSize(getBytesEncoder(), 32)],
      ['nr', getU16Encoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['poolsAttached', getU32Encoder()],
      ['reserved', fixEncoderSize(getBytesEncoder(), 64)],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([133, 220, 173, 213, 179, 211, 43, 238]),
    })
  );
}

export function getMarginAccountDecoder(): Decoder<MarginAccount> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['name', fixDecoderSize(getBytesDecoder(), 32)],
    ['nr', getU16Decoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['poolsAttached', getU32Decoder()],
    ['reserved', fixDecoderSize(getBytesDecoder(), 64)],
  ]);
}

export function getMarginAccountCodec(): Codec<
  MarginAccountArgs,
  MarginAccount
> {
  return combineCodec(getMarginAccountEncoder(), getMarginAccountDecoder());
}

export function decodeMarginAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<MarginAccount, TAddress>;
export function decodeMarginAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<MarginAccount, TAddress>;
export function decodeMarginAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<MarginAccount, TAddress> | MaybeAccount<MarginAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getMarginAccountDecoder()
  );
}

export async function fetchMarginAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<MarginAccount, TAddress>> {
  const maybeAccount = await fetchMaybeMarginAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMarginAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<MarginAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeMarginAccount(maybeAccount);
}

export async function fetchAllMarginAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<MarginAccount>[]> {
  const maybeAccounts = await fetchAllMaybeMarginAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeMarginAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<MarginAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeMarginAccount(maybeAccount));
}

export function getMarginAccountSize(): number {
  return 143;
}

export async function fetchMarginAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MarginAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<MarginAccount>> {
  const maybeAccount = await fetchMaybeMarginAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeMarginAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: MarginAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<MarginAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findMarginAccountPda(seeds, { programAddress });
  return await fetchMaybeMarginAccount(rpc, address, fetchConfig);
}
