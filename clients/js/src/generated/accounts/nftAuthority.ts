/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';

export type NftAuthority<TAddress extends string = string> = Account<
  NftAuthorityAccountData,
  TAddress
>;

export type MaybeNftAuthority<TAddress extends string = string> = MaybeAccount<
  NftAuthorityAccountData,
  TAddress
>;

export type NftAuthorityAccountData = {
  discriminator: Array<number>;
  randomSeed: Uint8Array;
  bump: Array<number>;
  pool: Address;
};

export type NftAuthorityAccountDataArgs = {
  randomSeed: Uint8Array;
  bump: Array<number>;
  pool: Address;
};

export function getNftAuthorityAccountDataEncoder(): Encoder<NftAuthorityAccountDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['randomSeed', getBytesEncoder({ size: 32 })],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['pool', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [194, 127, 219, 16, 219, 18, 250, 12],
    })
  );
}

export function getNftAuthorityAccountDataDecoder(): Decoder<NftAuthorityAccountData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['randomSeed', getBytesDecoder({ size: 32 })],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['pool', getAddressDecoder()],
  ]);
}

export function getNftAuthorityAccountDataCodec(): Codec<
  NftAuthorityAccountDataArgs,
  NftAuthorityAccountData
> {
  return combineCodec(
    getNftAuthorityAccountDataEncoder(),
    getNftAuthorityAccountDataDecoder()
  );
}

export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): NftAuthority<TAddress>;
export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeNftAuthority<TAddress>;
export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): NftAuthority<TAddress> | MaybeNftAuthority<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftAuthorityAccountDataDecoder()
  );
}

export async function fetchNftAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<NftAuthority<TAddress>> {
  const maybeAccount = await fetchMaybeNftAuthority(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeNftAuthority<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftAuthority(maybeAccount);
}

export async function fetchAllNftAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<NftAuthority[]> {
  const maybeAccounts = await fetchAllMaybeNftAuthority(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeNftAuthority[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNftAuthority(maybeAccount));
}

export function getNftAuthoritySize(): number {
  return 73;
}
