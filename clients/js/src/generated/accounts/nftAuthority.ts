/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  ReadonlyUint8Array,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';

export type NftAuthority = {
  discriminator: ReadonlyUint8Array;
  randomSeed: ReadonlyUint8Array;
  bump: Array<number>;
  pool: Address;
};

export type NftAuthorityArgs = {
  randomSeed: ReadonlyUint8Array;
  bump: Array<number>;
  pool: Address;
};

export function getNftAuthorityEncoder(): Encoder<NftAuthorityArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['randomSeed', fixEncoderSize(getBytesEncoder(), 32)],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['pool', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: new Uint8Array([194, 127, 219, 16, 219, 18, 250, 12]),
    })
  );
}

export function getNftAuthorityDecoder(): Decoder<NftAuthority> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['randomSeed', fixDecoderSize(getBytesDecoder(), 32)],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['pool', getAddressDecoder()],
  ]);
}

export function getNftAuthorityCodec(): Codec<NftAuthorityArgs, NftAuthority> {
  return combineCodec(getNftAuthorityEncoder(), getNftAuthorityDecoder());
}

export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<NftAuthority, TAddress>;
export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<NftAuthority, TAddress>;
export function decodeNftAuthority<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<NftAuthority, TAddress> | MaybeAccount<NftAuthority, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNftAuthorityDecoder()
  );
}

export async function fetchNftAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<NftAuthority, TAddress>> {
  const maybeAccount = await fetchMaybeNftAuthority(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNftAuthority<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<NftAuthority, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNftAuthority(maybeAccount);
}

export async function fetchAllNftAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<NftAuthority>[]> {
  const maybeAccounts = await fetchAllMaybeNftAuthority(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNftAuthority(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<NftAuthority>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNftAuthority(maybeAccount));
}

export function getNftAuthoritySize(): number {
  return 73;
}
