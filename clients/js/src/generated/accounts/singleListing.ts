/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';

export type SingleListing<TAddress extends string = string> = Account<
  SingleListingAccountData,
  TAddress
>;

export type MaybeSingleListing<TAddress extends string = string> = MaybeAccount<
  SingleListingAccountData,
  TAddress
>;

export type SingleListingAccountData = {
  discriminator: Array<number>;
  owner: Address;
  nftMint: Address;
  price: bigint;
  bump: Array<number>;
  reserved: Uint8Array;
};

export type SingleListingAccountDataArgs = {
  owner: Address;
  nftMint: Address;
  price: number | bigint;
  bump: Array<number>;
  reserved: Uint8Array;
};

export function getSingleListingAccountDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      owner: Address;
      nftMint: Address;
      price: number | bigint;
      bump: Array<number>;
      reserved: Uint8Array;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['owner', getAddressEncoder()],
      ['nftMint', getAddressEncoder()],
      ['price', getU64Encoder()],
      ['bump', getArrayEncoder(getU8Encoder(), { size: 1 })],
      ['reserved', getBytesEncoder({ size: 64 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [14, 114, 212, 140, 24, 134, 31, 24],
    })
  ) satisfies Encoder<SingleListingAccountDataArgs>;
}

export function getSingleListingAccountDataDecoder() {
  return getStructDecoder<SingleListingAccountData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['owner', getAddressDecoder()],
    ['nftMint', getAddressDecoder()],
    ['price', getU64Decoder()],
    ['bump', getArrayDecoder(getU8Decoder(), { size: 1 })],
    ['reserved', getBytesDecoder({ size: 64 })],
  ]) satisfies Decoder<SingleListingAccountData>;
}

export function getSingleListingAccountDataCodec(): Codec<
  SingleListingAccountDataArgs,
  SingleListingAccountData
> {
  return combineCodec(
    getSingleListingAccountDataEncoder(),
    getSingleListingAccountDataDecoder()
  );
}

export function decodeSingleListing<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): SingleListing<TAddress>;
export function decodeSingleListing<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeSingleListing<TAddress>;
export function decodeSingleListing<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): SingleListing<TAddress> | MaybeSingleListing<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSingleListingAccountDataDecoder()
  );
}

export async function fetchSingleListing<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<SingleListing<TAddress>> {
  const maybeAccount = await fetchMaybeSingleListing(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSingleListing<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeSingleListing<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSingleListing(maybeAccount);
}

export async function fetchAllSingleListing(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<SingleListing[]> {
  const maybeAccounts = await fetchAllMaybeSingleListing(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSingleListing(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeSingleListing[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSingleListing(maybeAccount));
}

export function getSingleListingSize(): number {
  return 145;
}
