/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';

export type SolEscrow<TAddress extends string = string> = Account<
  SolEscrowAccountData,
  TAddress
>;

export type MaybeSolEscrow<TAddress extends string = string> = MaybeAccount<
  SolEscrowAccountData,
  TAddress
>;

export type SolEscrowAccountData = { discriminator: Array<number> };

export type SolEscrowAccountDataArgs = {};

export function getSolEscrowAccountDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: Array<number> }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
    ]),
    (value) => ({
      ...value,
      discriminator: [75, 199, 250, 63, 244, 209, 235, 120],
    })
  ) satisfies Encoder<SolEscrowAccountDataArgs>;
}

export function getSolEscrowAccountDataDecoder() {
  return getStructDecoder<SolEscrowAccountData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
  ]) satisfies Decoder<SolEscrowAccountData>;
}

export function getSolEscrowAccountDataCodec(): Codec<
  SolEscrowAccountDataArgs,
  SolEscrowAccountData
> {
  return combineCodec(
    getSolEscrowAccountDataEncoder(),
    getSolEscrowAccountDataDecoder()
  );
}

export function decodeSolEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): SolEscrow<TAddress>;
export function decodeSolEscrow<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeSolEscrow<TAddress>;
export function decodeSolEscrow<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): SolEscrow<TAddress> | MaybeSolEscrow<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSolEscrowAccountDataDecoder()
  );
}

export async function fetchSolEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<SolEscrow<TAddress>> {
  const maybeAccount = await fetchMaybeSolEscrow(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSolEscrow<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeSolEscrow<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSolEscrow(maybeAccount);
}

export async function fetchAllSolEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<SolEscrow[]> {
  const maybeAccounts = await fetchAllMaybeSolEscrow(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSolEscrow(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeSolEscrow[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeSolEscrow(maybeAccount));
}

export function getSolEscrowSize(): number {
  return 8;
}
