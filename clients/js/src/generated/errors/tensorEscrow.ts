/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/web3.js';
import { TENSOR_ESCROW_PROGRAM_ADDRESS } from '../programs';

/** BadOwner: bad owner */
export const TENSOR_ESCROW_ERROR__BAD_OWNER = 0x1780; // 6016
/** BadMargin: bad margin account passed */
export const TENSOR_ESCROW_ERROR__BAD_MARGIN = 0x178b; // 6027

export type TensorEscrowError =
  | typeof TENSOR_ESCROW_ERROR__BAD_MARGIN
  | typeof TENSOR_ESCROW_ERROR__BAD_OWNER;

let tensorEscrowErrorMessages: Record<TensorEscrowError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  tensorEscrowErrorMessages = {
    [TENSOR_ESCROW_ERROR__BAD_MARGIN]: `bad margin account passed`,
    [TENSOR_ESCROW_ERROR__BAD_OWNER]: `bad owner`,
  };
}

export function getTensorEscrowErrorMessage(code: TensorEscrowError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (tensorEscrowErrorMessages as Record<TensorEscrowError, string>)[
      code
    ];
  }

  return 'Error message not available in production bundles.';
}

export function isTensorEscrowError<
  TProgramErrorCode extends TensorEscrowError,
>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    TENSOR_ESCROW_PROGRAM_ADDRESS,
    code
  );
}
