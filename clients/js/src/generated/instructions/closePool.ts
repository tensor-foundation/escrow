/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { findTSwapPda } from '../pdas';
import { TENSOR_ESCROW_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  PoolConfig,
  PoolConfigArgs,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
} from '../types';

export type ClosePoolInstruction<
  TProgram extends string = typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountSolEscrow extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountNftAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? ReadonlyAccount<TAccountTswap>
        : TAccountTswap,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountSolEscrow extends string
        ? WritableAccount<TAccountSolEscrow>
        : TAccountSolEscrow,
      TAccountWhitelist extends string
        ? ReadonlyAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountNftAuthority extends string
        ? WritableAccount<TAccountNftAuthority>
        : TAccountNftAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type ClosePoolInstructionData = {
  discriminator: Array<number>;
  config: PoolConfig;
};

export type ClosePoolInstructionDataArgs = { config: PoolConfigArgs };

export function getClosePoolInstructionDataEncoder(): Encoder<ClosePoolInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['config', getPoolConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [140, 189, 209, 23, 239, 62, 239, 11],
    })
  );
}

export function getClosePoolInstructionDataDecoder(): Decoder<ClosePoolInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getPoolConfigDecoder()],
  ]);
}

export function getClosePoolInstructionDataCodec(): Codec<
  ClosePoolInstructionDataArgs,
  ClosePoolInstructionData
> {
  return combineCodec(
    getClosePoolInstructionDataEncoder(),
    getClosePoolInstructionDataDecoder()
  );
}

export type ClosePoolAsyncInput<
  TAccountTswap extends string = string,
  TAccountPool extends string = string,
  TAccountSolEscrow extends string = string,
  TAccountWhitelist extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountNftAuthority extends string = string,
> = {
  tswap?: Address<TAccountTswap>;
  pool: Address<TAccountPool>;
  /** (!) if the order is marginated this won't return any funds to the user, since margin isn't auto-closed */
  solEscrow: Address<TAccountSolEscrow>;
  whitelist: Address<TAccountWhitelist>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  nftAuthority: Address<TAccountNftAuthority>;
  config: ClosePoolInstructionDataArgs['config'];
};

export async function getClosePoolInstructionAsync<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountSolEscrow extends string,
  TAccountWhitelist extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNftAuthority extends string,
>(
  input: ClosePoolAsyncInput<
    TAccountTswap,
    TAccountPool,
    TAccountSolEscrow,
    TAccountWhitelist,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNftAuthority
  >
): Promise<
  ClosePoolInstruction<
    typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
    TAccountTswap,
    TAccountPool,
    TAccountSolEscrow,
    TAccountWhitelist,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNftAuthority
  >
> {
  // Program address.
  const programAddress = TENSOR_ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tswap: { value: input.tswap ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    solEscrow: { value: input.solEscrow ?? null, isWritable: true },
    whitelist: { value: input.whitelist ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    nftAuthority: { value: input.nftAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tswap.value) {
    accounts.tswap.value = await findTSwapPda();
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tswap),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.solEscrow),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.nftAuthority),
    ],
    programAddress,
    data: getClosePoolInstructionDataEncoder().encode(
      args as ClosePoolInstructionDataArgs
    ),
  } as ClosePoolInstruction<
    typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
    TAccountTswap,
    TAccountPool,
    TAccountSolEscrow,
    TAccountWhitelist,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNftAuthority
  >;

  return instruction;
}

export type ClosePoolInput<
  TAccountTswap extends string = string,
  TAccountPool extends string = string,
  TAccountSolEscrow extends string = string,
  TAccountWhitelist extends string = string,
  TAccountOwner extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountNftAuthority extends string = string,
> = {
  tswap: Address<TAccountTswap>;
  pool: Address<TAccountPool>;
  /** (!) if the order is marginated this won't return any funds to the user, since margin isn't auto-closed */
  solEscrow: Address<TAccountSolEscrow>;
  whitelist: Address<TAccountWhitelist>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  nftAuthority: Address<TAccountNftAuthority>;
  config: ClosePoolInstructionDataArgs['config'];
};

export function getClosePoolInstruction<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountSolEscrow extends string,
  TAccountWhitelist extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNftAuthority extends string,
>(
  input: ClosePoolInput<
    TAccountTswap,
    TAccountPool,
    TAccountSolEscrow,
    TAccountWhitelist,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNftAuthority
  >
): ClosePoolInstruction<
  typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountTswap,
  TAccountPool,
  TAccountSolEscrow,
  TAccountWhitelist,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountNftAuthority
> {
  // Program address.
  const programAddress = TENSOR_ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tswap: { value: input.tswap ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    solEscrow: { value: input.solEscrow ?? null, isWritable: true },
    whitelist: { value: input.whitelist ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    nftAuthority: { value: input.nftAuthority ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tswap),
      getAccountMeta(accounts.pool),
      getAccountMeta(accounts.solEscrow),
      getAccountMeta(accounts.whitelist),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.nftAuthority),
    ],
    programAddress,
    data: getClosePoolInstructionDataEncoder().encode(
      args as ClosePoolInstructionDataArgs
    ),
  } as ClosePoolInstruction<
    typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
    TAccountTswap,
    TAccountPool,
    TAccountSolEscrow,
    TAccountWhitelist,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNftAuthority
  >;

  return instruction;
}

export type ParsedClosePoolInstruction<
  TProgram extends string = typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tswap: TAccountMetas[0];
    pool: TAccountMetas[1];
    /** (!) if the order is marginated this won't return any funds to the user, since margin isn't auto-closed */
    solEscrow: TAccountMetas[2];
    whitelist: TAccountMetas[3];
    owner: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
    nftAuthority: TAccountMetas[6];
  };
  data: ClosePoolInstructionData;
};

export function parseClosePoolInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedClosePoolInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tswap: getNextAccount(),
      pool: getNextAccount(),
      solEscrow: getNextAccount(),
      whitelist: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      nftAuthority: getNextAccount(),
    },
    data: getClosePoolInstructionDataDecoder().decode(instruction.data),
  };
}
