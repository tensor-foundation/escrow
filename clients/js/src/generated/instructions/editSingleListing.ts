/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type EditSingleListingInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts
    ]
  >;

export type EditSingleListingInstructionWithSigners<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSingleListing extends string
        ? WritableAccount<TAccountSingleListing>
        : TAccountSingleListing,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountOwner extends string
        ? ReadonlySignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts
    ]
  >;

export type EditSingleListingInstructionData = {
  discriminator: Array<number>;
  price: bigint;
};

export type EditSingleListingInstructionDataArgs = { price: number | bigint };

export function getEditSingleListingInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: Array<number>; price: number | bigint }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['price', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [88, 38, 236, 212, 31, 185, 18, 166],
    })
  ) satisfies Encoder<EditSingleListingInstructionDataArgs>;
}

export function getEditSingleListingInstructionDataDecoder() {
  return getStructDecoder<EditSingleListingInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['price', getU64Decoder()],
  ]) satisfies Decoder<EditSingleListingInstructionData>;
}

export function getEditSingleListingInstructionDataCodec(): Codec<
  EditSingleListingInstructionDataArgs,
  EditSingleListingInstructionData
> {
  return combineCodec(
    getEditSingleListingInstructionDataEncoder(),
    getEditSingleListingInstructionDataDecoder()
  );
}

export type EditSingleListingInput<
  TAccountSingleListing extends string,
  TAccountNftMint extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string
> = {
  singleListing: Address<TAccountSingleListing>;
  nftMint: Address<TAccountNftMint>;
  owner: Address<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  price: EditSingleListingInstructionDataArgs['price'];
};

export type EditSingleListingInputWithSigners<
  TAccountSingleListing extends string,
  TAccountNftMint extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string
> = {
  singleListing: Address<TAccountSingleListing>;
  nftMint: Address<TAccountNftMint>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  price: EditSingleListingInstructionDataArgs['price'];
};

export function getEditSingleListingInstruction<
  TAccountSingleListing extends string,
  TAccountNftMint extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: EditSingleListingInputWithSigners<
    TAccountSingleListing,
    TAccountNftMint,
    TAccountOwner,
    TAccountSystemProgram
  >
): EditSingleListingInstructionWithSigners<
  TProgram,
  TAccountSingleListing,
  TAccountNftMint,
  TAccountOwner,
  TAccountSystemProgram
>;
export function getEditSingleListingInstruction<
  TAccountSingleListing extends string,
  TAccountNftMint extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: EditSingleListingInput<
    TAccountSingleListing,
    TAccountNftMint,
    TAccountOwner,
    TAccountSystemProgram
  >
): EditSingleListingInstruction<
  TProgram,
  TAccountSingleListing,
  TAccountNftMint,
  TAccountOwner,
  TAccountSystemProgram
>;
export function getEditSingleListingInstruction<
  TAccountSingleListing extends string,
  TAccountNftMint extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: EditSingleListingInput<
    TAccountSingleListing,
    TAccountNftMint,
    TAccountOwner,
    TAccountSystemProgram
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getEditSingleListingInstructionRaw<
      TProgram,
      TAccountSingleListing,
      TAccountNftMint,
      TAccountOwner,
      TAccountSystemProgram
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    singleListing: { value: input.singleListing ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getEditSingleListingInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as EditSingleListingInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getEditSingleListingInstructionRaw<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountSingleListing extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    singleListing: TAccountSingleListing extends string
      ? Address<TAccountSingleListing>
      : TAccountSingleListing;
    nftMint: TAccountNftMint extends string
      ? Address<TAccountNftMint>
      : TAccountNftMint;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
  },
  args: EditSingleListingInstructionDataArgs,
  programAddress: Address<TProgram> = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.singleListing, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftMint, AccountRole.READONLY),
      accountMetaWithDefault(accounts.owner, AccountRole.READONLY_SIGNER),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getEditSingleListingInstructionDataEncoder().encode(args),
    programAddress,
  } as EditSingleListingInstruction<
    TProgram,
    TAccountSingleListing,
    TAccountNftMint,
    TAccountOwner,
    TAccountSystemProgram,
    TRemainingAccounts
  >;
}

export type ParsedEditSingleListingInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    singleListing: TAccountMetas[0];
    nftMint: TAccountMetas[1];
    owner: TAccountMetas[2];
    systemProgram: TAccountMetas[3];
  };
  data: EditSingleListingInstructionData;
};

export function parseEditSingleListingInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedEditSingleListingInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      singleListing: getNextAccount(),
      nftMint: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getEditSingleListingInstructionDataDecoder().decode(instruction.data),
  };
}
