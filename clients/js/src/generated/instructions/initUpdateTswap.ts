/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  TSwapConfig,
  TSwapConfigArgs,
  getTSwapConfigDecoder,
  getTSwapConfigEncoder,
} from '../types';

export type InitUpdateTswapInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountNewOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? WritableAccount<TAccountTswap>
        : TAccountTswap,
      TAccountFeeVault extends string
        ? ReadonlyAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner>
        : TAccountCosigner,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountNewOwner extends string
        ? ReadonlySignerAccount<TAccountNewOwner>
        : TAccountNewOwner,
      ...TRemainingAccounts
    ]
  >;

export type InitUpdateTswapInstructionWithSigners<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountNewOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? WritableAccount<TAccountTswap>
        : TAccountTswap,
      TAccountFeeVault extends string
        ? ReadonlyAccount<TAccountFeeVault>
        : TAccountFeeVault,
      TAccountCosigner extends string
        ? ReadonlySignerAccount<TAccountCosigner> &
            IAccountSignerMeta<TAccountCosigner>
        : TAccountCosigner,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountNewOwner extends string
        ? ReadonlySignerAccount<TAccountNewOwner> &
            IAccountSignerMeta<TAccountNewOwner>
        : TAccountNewOwner,
      ...TRemainingAccounts
    ]
  >;

export type InitUpdateTswapInstructionData = {
  discriminator: Array<number>;
  config: TSwapConfig;
};

export type InitUpdateTswapInstructionDataArgs = { config: TSwapConfigArgs };

export function getInitUpdateTswapInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: Array<number>; config: TSwapConfigArgs }>(
      [
        ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
        ['config', getTSwapConfigEncoder()],
      ]
    ),
    (value) => ({
      ...value,
      discriminator: [140, 185, 54, 172, 15, 94, 31, 155],
    })
  ) satisfies Encoder<InitUpdateTswapInstructionDataArgs>;
}

export function getInitUpdateTswapInstructionDataDecoder() {
  return getStructDecoder<InitUpdateTswapInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getTSwapConfigDecoder()],
  ]) satisfies Decoder<InitUpdateTswapInstructionData>;
}

export function getInitUpdateTswapInstructionDataCodec(): Codec<
  InitUpdateTswapInstructionDataArgs,
  InitUpdateTswapInstructionData
> {
  return combineCodec(
    getInitUpdateTswapInstructionDataEncoder(),
    getInitUpdateTswapInstructionDataDecoder()
  );
}

export type InitUpdateTswapInput<
  TAccountTswap extends string,
  TAccountFeeVault extends string,
  TAccountCosigner extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNewOwner extends string
> = {
  tswap: Address<TAccountTswap>;
  feeVault: Address<TAccountFeeVault>;
  /** We ask also for a signature just to make sure this wallet can actually sign things */
  cosigner: Address<TAccountCosigner>;
  owner: Address<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  newOwner: Address<TAccountNewOwner>;
  config: InitUpdateTswapInstructionDataArgs['config'];
};

export type InitUpdateTswapInputWithSigners<
  TAccountTswap extends string,
  TAccountFeeVault extends string,
  TAccountCosigner extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNewOwner extends string
> = {
  tswap: Address<TAccountTswap>;
  feeVault: Address<TAccountFeeVault>;
  /** We ask also for a signature just to make sure this wallet can actually sign things */
  cosigner: TransactionSigner<TAccountCosigner>;
  owner: TransactionSigner<TAccountOwner>;
  systemProgram?: Address<TAccountSystemProgram>;
  newOwner: TransactionSigner<TAccountNewOwner>;
  config: InitUpdateTswapInstructionDataArgs['config'];
};

export function getInitUpdateTswapInstruction<
  TAccountTswap extends string,
  TAccountFeeVault extends string,
  TAccountCosigner extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNewOwner extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: InitUpdateTswapInputWithSigners<
    TAccountTswap,
    TAccountFeeVault,
    TAccountCosigner,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNewOwner
  >
): InitUpdateTswapInstructionWithSigners<
  TProgram,
  TAccountTswap,
  TAccountFeeVault,
  TAccountCosigner,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountNewOwner
>;
export function getInitUpdateTswapInstruction<
  TAccountTswap extends string,
  TAccountFeeVault extends string,
  TAccountCosigner extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNewOwner extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: InitUpdateTswapInput<
    TAccountTswap,
    TAccountFeeVault,
    TAccountCosigner,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNewOwner
  >
): InitUpdateTswapInstruction<
  TProgram,
  TAccountTswap,
  TAccountFeeVault,
  TAccountCosigner,
  TAccountOwner,
  TAccountSystemProgram,
  TAccountNewOwner
>;
export function getInitUpdateTswapInstruction<
  TAccountTswap extends string,
  TAccountFeeVault extends string,
  TAccountCosigner extends string,
  TAccountOwner extends string,
  TAccountSystemProgram extends string,
  TAccountNewOwner extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: InitUpdateTswapInput<
    TAccountTswap,
    TAccountFeeVault,
    TAccountCosigner,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNewOwner
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getInitUpdateTswapInstructionRaw<
      TProgram,
      TAccountTswap,
      TAccountFeeVault,
      TAccountCosigner,
      TAccountOwner,
      TAccountSystemProgram,
      TAccountNewOwner
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    tswap: { value: input.tswap ?? null, isWritable: true },
    feeVault: { value: input.feeVault ?? null, isWritable: false },
    cosigner: { value: input.cosigner ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    newOwner: { value: input.newOwner ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getInitUpdateTswapInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as InitUpdateTswapInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getInitUpdateTswapInstructionRaw<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountFeeVault extends string | IAccountMeta<string> = string,
  TAccountCosigner extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountNewOwner extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    tswap: TAccountTswap extends string
      ? Address<TAccountTswap>
      : TAccountTswap;
    feeVault: TAccountFeeVault extends string
      ? Address<TAccountFeeVault>
      : TAccountFeeVault;
    cosigner: TAccountCosigner extends string
      ? Address<TAccountCosigner>
      : TAccountCosigner;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    newOwner: TAccountNewOwner extends string
      ? Address<TAccountNewOwner>
      : TAccountNewOwner;
  },
  args: InitUpdateTswapInstructionDataArgs,
  programAddress: Address<TProgram> = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.tswap, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.feeVault, AccountRole.READONLY),
      accountMetaWithDefault(accounts.cosigner, AccountRole.READONLY_SIGNER),
      accountMetaWithDefault(accounts.owner, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.newOwner, AccountRole.READONLY_SIGNER),
      ...(remainingAccounts ?? []),
    ],
    data: getInitUpdateTswapInstructionDataEncoder().encode(args),
    programAddress,
  } as InitUpdateTswapInstruction<
    TProgram,
    TAccountTswap,
    TAccountFeeVault,
    TAccountCosigner,
    TAccountOwner,
    TAccountSystemProgram,
    TAccountNewOwner,
    TRemainingAccounts
  >;
}

export type ParsedInitUpdateTswapInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tswap: TAccountMetas[0];
    feeVault: TAccountMetas[1];
    /** We ask also for a signature just to make sure this wallet can actually sign things */
    cosigner: TAccountMetas[2];
    owner: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    newOwner: TAccountMetas[5];
  };
  data: InitUpdateTswapInstructionData;
};

export function parseInitUpdateTswapInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitUpdateTswapInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tswap: getNextAccount(),
      feeVault: getNextAccount(),
      cosigner: getNextAccount(),
      owner: getNextAccount(),
      systemProgram: getNextAccount(),
      newOwner: getNextAccount(),
    },
    data: getInitUpdateTswapInstructionDataDecoder().decode(instruction.data),
  };
}
