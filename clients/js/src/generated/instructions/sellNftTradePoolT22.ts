/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
} from '@solana/instructions';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  PoolConfig,
  PoolConfigArgs,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
} from '../types';

export type SellNftTradePoolT22Instruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountShared extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountNftReceipt extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountShared extends string
        ? ReadonlyAccount<TAccountShared>
        : TAccountShared,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountNftReceipt extends string
        ? WritableAccount<TAccountNftReceipt>
        : TAccountNftReceipt,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMarginAccount extends string
        ? WritableAccount<TAccountMarginAccount>
        : TAccountMarginAccount,
      TAccountTakerBroker extends string
        ? WritableAccount<TAccountTakerBroker>
        : TAccountTakerBroker,
      ...TRemainingAccounts
    ]
  >;

export type SellNftTradePoolT22InstructionWithSigners<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountShared extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountNftReceipt extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountShared extends string
        ? ReadonlyAccount<TAccountShared>
        : TAccountShared,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountNftReceipt extends string
        ? WritableAccount<TAccountNftReceipt>
        : TAccountNftReceipt,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMarginAccount extends string
        ? WritableAccount<TAccountMarginAccount>
        : TAccountMarginAccount,
      TAccountTakerBroker extends string
        ? WritableAccount<TAccountTakerBroker>
        : TAccountTakerBroker,
      ...TRemainingAccounts
    ]
  >;

export type SellNftTradePoolT22InstructionData = {
  discriminator: Array<number>;
  config: PoolConfig;
  minPrice: bigint;
};

export type SellNftTradePoolT22InstructionDataArgs = {
  config: PoolConfigArgs;
  minPrice: number | bigint;
};

export function getSellNftTradePoolT22InstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      config: PoolConfigArgs;
      minPrice: number | bigint;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['config', getPoolConfigEncoder()],
      ['minPrice', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: [124, 145, 23, 52, 72, 113, 85, 9] })
  ) satisfies Encoder<SellNftTradePoolT22InstructionDataArgs>;
}

export function getSellNftTradePoolT22InstructionDataDecoder() {
  return getStructDecoder<SellNftTradePoolT22InstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getPoolConfigDecoder()],
    ['minPrice', getU64Decoder()],
  ]) satisfies Decoder<SellNftTradePoolT22InstructionData>;
}

export function getSellNftTradePoolT22InstructionDataCodec(): Codec<
  SellNftTradePoolT22InstructionDataArgs,
  SellNftTradePoolT22InstructionData
> {
  return combineCodec(
    getSellNftTradePoolT22InstructionDataEncoder(),
    getSellNftTradePoolT22InstructionDataDecoder()
  );
}

export type SellNftTradePoolT22Input<
  TAccountShared extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarginAccount extends string,
  TAccountTakerBroker extends string
> = {
  shared: Address<TAccountShared>;
  nftEscrow: Address<TAccountNftEscrow>;
  nftReceipt: Address<TAccountNftReceipt>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  marginAccount: Address<TAccountMarginAccount>;
  takerBroker: Address<TAccountTakerBroker>;
  config: SellNftTradePoolT22InstructionDataArgs['config'];
  minPrice: SellNftTradePoolT22InstructionDataArgs['minPrice'];
};

export type SellNftTradePoolT22InputWithSigners<
  TAccountShared extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarginAccount extends string,
  TAccountTakerBroker extends string
> = {
  shared: Address<TAccountShared>;
  nftEscrow: Address<TAccountNftEscrow>;
  nftReceipt: Address<TAccountNftReceipt>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  marginAccount: Address<TAccountMarginAccount>;
  takerBroker: Address<TAccountTakerBroker>;
  config: SellNftTradePoolT22InstructionDataArgs['config'];
  minPrice: SellNftTradePoolT22InstructionDataArgs['minPrice'];
};

export function getSellNftTradePoolT22Instruction<
  TAccountShared extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarginAccount extends string,
  TAccountTakerBroker extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: SellNftTradePoolT22InputWithSigners<
    TAccountShared,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarginAccount,
    TAccountTakerBroker
  >
): SellNftTradePoolT22InstructionWithSigners<
  TProgram,
  TAccountShared,
  TAccountNftEscrow,
  TAccountNftReceipt,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountMarginAccount,
  TAccountTakerBroker
>;
export function getSellNftTradePoolT22Instruction<
  TAccountShared extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarginAccount extends string,
  TAccountTakerBroker extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: SellNftTradePoolT22Input<
    TAccountShared,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarginAccount,
    TAccountTakerBroker
  >
): SellNftTradePoolT22Instruction<
  TProgram,
  TAccountShared,
  TAccountNftEscrow,
  TAccountNftReceipt,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountMarginAccount,
  TAccountTakerBroker
>;
export function getSellNftTradePoolT22Instruction<
  TAccountShared extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMarginAccount extends string,
  TAccountTakerBroker extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: SellNftTradePoolT22Input<
    TAccountShared,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarginAccount,
    TAccountTakerBroker
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getSellNftTradePoolT22InstructionRaw<
      TProgram,
      TAccountShared,
      TAccountNftEscrow,
      TAccountNftReceipt,
      TAccountTokenProgram,
      TAccountSystemProgram,
      TAccountMarginAccount,
      TAccountTakerBroker
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    shared: { value: input.shared ?? null, isWritable: false },
    nftEscrow: { value: input.nftEscrow ?? null, isWritable: true },
    nftReceipt: { value: input.nftReceipt ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    marginAccount: { value: input.marginAccount ?? null, isWritable: true },
    takerBroker: { value: input.takerBroker ?? null, isWritable: true },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getSellNftTradePoolT22InstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as SellNftTradePoolT22InstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getSellNftTradePoolT22InstructionRaw<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountShared extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountNftReceipt extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountTakerBroker extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    shared: TAccountShared extends string
      ? Address<TAccountShared>
      : TAccountShared;
    nftEscrow: TAccountNftEscrow extends string
      ? Address<TAccountNftEscrow>
      : TAccountNftEscrow;
    nftReceipt: TAccountNftReceipt extends string
      ? Address<TAccountNftReceipt>
      : TAccountNftReceipt;
    tokenProgram?: TAccountTokenProgram extends string
      ? Address<TAccountTokenProgram>
      : TAccountTokenProgram;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    marginAccount: TAccountMarginAccount extends string
      ? Address<TAccountMarginAccount>
      : TAccountMarginAccount;
    takerBroker: TAccountTakerBroker extends string
      ? Address<TAccountTakerBroker>
      : TAccountTakerBroker;
  },
  args: SellNftTradePoolT22InstructionDataArgs,
  programAddress: Address<TProgram> = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.shared, AccountRole.READONLY),
      accountMetaWithDefault(accounts.nftEscrow, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftReceipt, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.tokenProgram ??
          ('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.marginAccount, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.takerBroker, AccountRole.WRITABLE),
      ...(remainingAccounts ?? []),
    ],
    data: getSellNftTradePoolT22InstructionDataEncoder().encode(args),
    programAddress,
  } as SellNftTradePoolT22Instruction<
    TProgram,
    TAccountShared,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMarginAccount,
    TAccountTakerBroker,
    TRemainingAccounts
  >;
}

export type ParsedSellNftTradePoolT22Instruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    shared: TAccountMetas[0];
    nftEscrow: TAccountMetas[1];
    nftReceipt: TAccountMetas[2];
    tokenProgram: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    marginAccount: TAccountMetas[5];
    takerBroker: TAccountMetas[6];
  };
  data: SellNftTradePoolT22InstructionData;
};

export function parseSellNftTradePoolT22Instruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSellNftTradePoolT22Instruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      shared: getNextAccount(),
      nftEscrow: getNextAccount(),
      nftReceipt: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      marginAccount: getNextAccount(),
      takerBroker: getNextAccount(),
    },
    data: getSellNftTradePoolT22InstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
