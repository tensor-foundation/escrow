/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import { TENSOR_ESCROW_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';
import {
  PoolConfig,
  PoolConfigArgs,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
} from '../types';

export type SetPoolFreezeInstruction<
  TProgram extends string = typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetPoolFreezeInstructionData = {
  discriminator: Array<number>;
  config: PoolConfig;
  freeze: boolean;
};

export type SetPoolFreezeInstructionDataArgs = {
  config: PoolConfigArgs;
  freeze: boolean;
};

export function getSetPoolFreezeInstructionDataEncoder(): Encoder<SetPoolFreezeInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['config', getPoolConfigEncoder()],
      ['freeze', getBooleanEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [110, 201, 190, 64, 166, 186, 105, 131],
    })
  );
}

export function getSetPoolFreezeInstructionDataDecoder(): Decoder<SetPoolFreezeInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getPoolConfigDecoder()],
    ['freeze', getBooleanDecoder()],
  ]);
}

export function getSetPoolFreezeInstructionDataCodec(): Codec<
  SetPoolFreezeInstructionDataArgs,
  SetPoolFreezeInstructionData
> {
  return combineCodec(
    getSetPoolFreezeInstructionDataEncoder(),
    getSetPoolFreezeInstructionDataDecoder()
  );
}

export type SetPoolFreezeInput<TAccountSystemProgram extends string = string> =
  {
    systemProgram?: Address<TAccountSystemProgram>;
    config: SetPoolFreezeInstructionDataArgs['config'];
    freeze: SetPoolFreezeInstructionDataArgs['freeze'];
  };

export function getSetPoolFreezeInstruction<
  TAccountSystemProgram extends string,
>(
  input: SetPoolFreezeInput<TAccountSystemProgram>
): SetPoolFreezeInstruction<
  typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = TENSOR_ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.systemProgram)],
    programAddress,
    data: getSetPoolFreezeInstructionDataEncoder().encode(
      args as SetPoolFreezeInstructionDataArgs
    ),
  } as SetPoolFreezeInstruction<
    typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSetPoolFreezeInstruction<
  TProgram extends string = typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
  };
  data: SetPoolFreezeInstructionData;
};

export function parseSetPoolFreezeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetPoolFreezeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
    },
    data: getSetPoolFreezeInstructionDataDecoder().decode(instruction.data),
  };
}
