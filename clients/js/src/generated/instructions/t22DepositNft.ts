/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU8Decoder, getU8Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  WritableAccount,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  PoolConfig,
  PoolConfigArgs,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
} from '../types';

export type T22DepositNftInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountNftReceipt extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMintProof extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? ReadonlyAccount<TAccountTswap>
        : TAccountTswap,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountWhitelist extends string
        ? ReadonlyAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountNftSource extends string
        ? WritableAccount<TAccountNftSource>
        : TAccountNftSource,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountNftReceipt extends string
        ? WritableAccount<TAccountNftReceipt>
        : TAccountNftReceipt,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMintProof extends string
        ? ReadonlyAccount<TAccountMintProof>
        : TAccountMintProof,
      ...TRemainingAccounts
    ]
  >;

export type T22DepositNftInstructionWithSigners<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountNftReceipt extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMintProof extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? ReadonlyAccount<TAccountTswap>
        : TAccountTswap,
      TAccountPool extends string
        ? WritableAccount<TAccountPool>
        : TAccountPool,
      TAccountWhitelist extends string
        ? ReadonlyAccount<TAccountWhitelist>
        : TAccountWhitelist,
      TAccountNftSource extends string
        ? WritableAccount<TAccountNftSource>
        : TAccountNftSource,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountNftEscrow extends string
        ? WritableAccount<TAccountNftEscrow>
        : TAccountNftEscrow,
      TAccountNftReceipt extends string
        ? WritableAccount<TAccountNftReceipt>
        : TAccountNftReceipt,
      TAccountOwner extends string
        ? WritableSignerAccount<TAccountOwner> &
            IAccountSignerMeta<TAccountOwner>
        : TAccountOwner,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountMintProof extends string
        ? ReadonlyAccount<TAccountMintProof>
        : TAccountMintProof,
      ...TRemainingAccounts
    ]
  >;

export type T22DepositNftInstructionData = {
  discriminator: Array<number>;
  config: PoolConfig;
};

export type T22DepositNftInstructionDataArgs = { config: PoolConfigArgs };

export function getT22DepositNftInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: Array<number>; config: PoolConfigArgs }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['config', getPoolConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [208, 34, 6, 147, 95, 218, 49, 160],
    })
  ) satisfies Encoder<T22DepositNftInstructionDataArgs>;
}

export function getT22DepositNftInstructionDataDecoder() {
  return getStructDecoder<T22DepositNftInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getPoolConfigDecoder()],
  ]) satisfies Decoder<T22DepositNftInstructionData>;
}

export function getT22DepositNftInstructionDataCodec(): Codec<
  T22DepositNftInstructionDataArgs,
  T22DepositNftInstructionData
> {
  return combineCodec(
    getT22DepositNftInstructionDataEncoder(),
    getT22DepositNftInstructionDataDecoder()
  );
}

export type T22DepositNftInput<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountWhitelist extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMintProof extends string
> = {
  tswap: Address<TAccountTswap>;
  pool: Address<TAccountPool>;
  /** Needed for pool seeds derivation, also checked via has_one on pool */
  whitelist: Address<TAccountWhitelist>;
  nftSource: Address<TAccountNftSource>;
  nftMint: Address<TAccountNftMint>;
  nftEscrow: Address<TAccountNftEscrow>;
  nftReceipt: Address<TAccountNftReceipt>;
  owner: Address<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  mintProof: Address<TAccountMintProof>;
  config: T22DepositNftInstructionDataArgs['config'];
};

export type T22DepositNftInputWithSigners<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountWhitelist extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMintProof extends string
> = {
  tswap: Address<TAccountTswap>;
  pool: Address<TAccountPool>;
  /** Needed for pool seeds derivation, also checked via has_one on pool */
  whitelist: Address<TAccountWhitelist>;
  nftSource: Address<TAccountNftSource>;
  nftMint: Address<TAccountNftMint>;
  nftEscrow: Address<TAccountNftEscrow>;
  nftReceipt: Address<TAccountNftReceipt>;
  owner: TransactionSigner<TAccountOwner>;
  tokenProgram?: Address<TAccountTokenProgram>;
  systemProgram?: Address<TAccountSystemProgram>;
  mintProof: Address<TAccountMintProof>;
  config: T22DepositNftInstructionDataArgs['config'];
};

export function getT22DepositNftInstruction<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountWhitelist extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMintProof extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: T22DepositNftInputWithSigners<
    TAccountTswap,
    TAccountPool,
    TAccountWhitelist,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMintProof
  >
): T22DepositNftInstructionWithSigners<
  TProgram,
  TAccountTswap,
  TAccountPool,
  TAccountWhitelist,
  TAccountNftSource,
  TAccountNftMint,
  TAccountNftEscrow,
  TAccountNftReceipt,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountMintProof
>;
export function getT22DepositNftInstruction<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountWhitelist extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMintProof extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: T22DepositNftInput<
    TAccountTswap,
    TAccountPool,
    TAccountWhitelist,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMintProof
  >
): T22DepositNftInstruction<
  TProgram,
  TAccountTswap,
  TAccountPool,
  TAccountWhitelist,
  TAccountNftSource,
  TAccountNftMint,
  TAccountNftEscrow,
  TAccountNftReceipt,
  TAccountOwner,
  TAccountTokenProgram,
  TAccountSystemProgram,
  TAccountMintProof
>;
export function getT22DepositNftInstruction<
  TAccountTswap extends string,
  TAccountPool extends string,
  TAccountWhitelist extends string,
  TAccountNftSource extends string,
  TAccountNftMint extends string,
  TAccountNftEscrow extends string,
  TAccountNftReceipt extends string,
  TAccountOwner extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TAccountMintProof extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: T22DepositNftInput<
    TAccountTswap,
    TAccountPool,
    TAccountWhitelist,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMintProof
  >
): IInstruction {
  // Program address.
  const programAddress =
    'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getT22DepositNftInstructionRaw<
      TProgram,
      TAccountTswap,
      TAccountPool,
      TAccountWhitelist,
      TAccountNftSource,
      TAccountNftMint,
      TAccountNftEscrow,
      TAccountNftReceipt,
      TAccountOwner,
      TAccountTokenProgram,
      TAccountSystemProgram,
      TAccountMintProof
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    tswap: { value: input.tswap ?? null, isWritable: false },
    pool: { value: input.pool ?? null, isWritable: true },
    whitelist: { value: input.whitelist ?? null, isWritable: false },
    nftSource: { value: input.nftSource ?? null, isWritable: true },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    nftEscrow: { value: input.nftEscrow ?? null, isWritable: true },
    nftReceipt: { value: input.nftReceipt ?? null, isWritable: true },
    owner: { value: input.owner ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    mintProof: { value: input.mintProof ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getT22DepositNftInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as T22DepositNftInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getT22DepositNftInstructionRaw<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountPool extends string | IAccountMeta<string> = string,
  TAccountWhitelist extends string | IAccountMeta<string> = string,
  TAccountNftSource extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountNftEscrow extends string | IAccountMeta<string> = string,
  TAccountNftReceipt extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | IAccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountMintProof extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    tswap: TAccountTswap extends string
      ? Address<TAccountTswap>
      : TAccountTswap;
    pool: TAccountPool extends string ? Address<TAccountPool> : TAccountPool;
    whitelist: TAccountWhitelist extends string
      ? Address<TAccountWhitelist>
      : TAccountWhitelist;
    nftSource: TAccountNftSource extends string
      ? Address<TAccountNftSource>
      : TAccountNftSource;
    nftMint: TAccountNftMint extends string
      ? Address<TAccountNftMint>
      : TAccountNftMint;
    nftEscrow: TAccountNftEscrow extends string
      ? Address<TAccountNftEscrow>
      : TAccountNftEscrow;
    nftReceipt: TAccountNftReceipt extends string
      ? Address<TAccountNftReceipt>
      : TAccountNftReceipt;
    owner: TAccountOwner extends string
      ? Address<TAccountOwner>
      : TAccountOwner;
    tokenProgram?: TAccountTokenProgram extends string
      ? Address<TAccountTokenProgram>
      : TAccountTokenProgram;
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
    mintProof: TAccountMintProof extends string
      ? Address<TAccountMintProof>
      : TAccountMintProof;
  },
  args: T22DepositNftInstructionDataArgs,
  programAddress: Address<TProgram> = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.tswap, AccountRole.READONLY),
      accountMetaWithDefault(accounts.pool, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.whitelist, AccountRole.READONLY),
      accountMetaWithDefault(accounts.nftSource, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftMint, AccountRole.READONLY),
      accountMetaWithDefault(accounts.nftEscrow, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.nftReceipt, AccountRole.WRITABLE),
      accountMetaWithDefault(accounts.owner, AccountRole.WRITABLE_SIGNER),
      accountMetaWithDefault(
        accounts.tokenProgram ??
          ('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      accountMetaWithDefault(accounts.mintProof, AccountRole.READONLY),
      ...(remainingAccounts ?? []),
    ],
    data: getT22DepositNftInstructionDataEncoder().encode(args),
    programAddress,
  } as T22DepositNftInstruction<
    TProgram,
    TAccountTswap,
    TAccountPool,
    TAccountWhitelist,
    TAccountNftSource,
    TAccountNftMint,
    TAccountNftEscrow,
    TAccountNftReceipt,
    TAccountOwner,
    TAccountTokenProgram,
    TAccountSystemProgram,
    TAccountMintProof,
    TRemainingAccounts
  >;
}

export type ParsedT22DepositNftInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tswap: TAccountMetas[0];
    pool: TAccountMetas[1];
    /** Needed for pool seeds derivation, also checked via has_one on pool */
    whitelist: TAccountMetas[2];
    nftSource: TAccountMetas[3];
    nftMint: TAccountMetas[4];
    nftEscrow: TAccountMetas[5];
    nftReceipt: TAccountMetas[6];
    owner: TAccountMetas[7];
    tokenProgram: TAccountMetas[8];
    systemProgram: TAccountMetas[9];
    mintProof: TAccountMetas[10];
  };
  data: T22DepositNftInstructionData;
};

export function parseT22DepositNftInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedT22DepositNftInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 11) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tswap: getNextAccount(),
      pool: getNextAccount(),
      whitelist: getNextAccount(),
      nftSource: getNextAccount(),
      nftMint: getNextAccount(),
      nftEscrow: getNextAccount(),
      nftReceipt: getNextAccount(),
      owner: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
      mintProof: getNextAccount(),
    },
    data: getT22DepositNftInstructionDataDecoder().decode(instruction.data),
  };
}
