/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
} from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
} from '@solana/instructions';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
} from '@solana/options';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';
import {
  AuthorizationDataLocal,
  AuthorizationDataLocalArgs,
  PoolConfig,
  PoolConfigArgs,
  getAuthorizationDataLocalDecoder,
  getAuthorizationDataLocalEncoder,
  getPoolConfigDecoder,
  getPoolConfigEncoder,
} from '../types';

export type TakeSnipeInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts
    ]
  >;

export type TakeSnipeInstructionWithSigners<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts
    ]
  >;

export type TakeSnipeInstructionData = {
  discriminator: Array<number>;
  config: PoolConfig;
  actualPrice: bigint;
  authorizationData: Option<AuthorizationDataLocal>;
};

export type TakeSnipeInstructionDataArgs = {
  config: PoolConfigArgs;
  actualPrice: number | bigint;
  authorizationData: OptionOrNullable<AuthorizationDataLocalArgs>;
};

export function getTakeSnipeInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{
      discriminator: Array<number>;
      config: PoolConfigArgs;
      actualPrice: number | bigint;
      authorizationData: OptionOrNullable<AuthorizationDataLocalArgs>;
    }>([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['config', getPoolConfigEncoder()],
      ['actualPrice', getU64Encoder()],
      [
        'authorizationData',
        getOptionEncoder(getAuthorizationDataLocalEncoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: [10, 151, 48, 226, 248, 24, 227, 231],
    })
  ) satisfies Encoder<TakeSnipeInstructionDataArgs>;
}

export function getTakeSnipeInstructionDataDecoder() {
  return getStructDecoder<TakeSnipeInstructionData>([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['config', getPoolConfigDecoder()],
    ['actualPrice', getU64Decoder()],
    ['authorizationData', getOptionDecoder(getAuthorizationDataLocalDecoder())],
  ]) satisfies Decoder<TakeSnipeInstructionData>;
}

export function getTakeSnipeInstructionDataCodec(): Codec<
  TakeSnipeInstructionDataArgs,
  TakeSnipeInstructionData
> {
  return combineCodec(
    getTakeSnipeInstructionDataEncoder(),
    getTakeSnipeInstructionDataDecoder()
  );
}

export type TakeSnipeInput<TAccountSystemProgram extends string> = {
  systemProgram?: Address<TAccountSystemProgram>;
  config: TakeSnipeInstructionDataArgs['config'];
  actualPrice: TakeSnipeInstructionDataArgs['actualPrice'];
  authorizationData: TakeSnipeInstructionDataArgs['authorizationData'];
};

export type TakeSnipeInputWithSigners<TAccountSystemProgram extends string> = {
  systemProgram?: Address<TAccountSystemProgram>;
  config: TakeSnipeInstructionDataArgs['config'];
  actualPrice: TakeSnipeInstructionDataArgs['actualPrice'];
  authorizationData: TakeSnipeInstructionDataArgs['authorizationData'];
};

export function getTakeSnipeInstruction<
  TAccountSystemProgram extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: TakeSnipeInputWithSigners<TAccountSystemProgram>
): TakeSnipeInstructionWithSigners<TProgram, TAccountSystemProgram>;
export function getTakeSnipeInstruction<
  TAccountSystemProgram extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(
  input: TakeSnipeInput<TAccountSystemProgram>
): TakeSnipeInstruction<TProgram, TAccountSystemProgram>;
export function getTakeSnipeInstruction<
  TAccountSystemProgram extends string,
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'
>(input: TakeSnipeInput<TAccountSystemProgram>): IInstruction {
  // Program address.
  const programAddress =
    'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getTakeSnipeInstructionRaw<TProgram, TAccountSystemProgram>
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getTakeSnipeInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as TakeSnipeInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getTakeSnipeInstructionRaw<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    systemProgram?: TAccountSystemProgram extends string
      ? Address<TAccountSystemProgram>
      : TAccountSystemProgram;
  },
  args: TakeSnipeInstructionDataArgs,
  programAddress: Address<TProgram> = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(
        accounts.systemProgram ??
          ('11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>),
        AccountRole.READONLY
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getTakeSnipeInstructionDataEncoder().encode(args),
    programAddress,
  } as TakeSnipeInstruction<
    TProgram,
    TAccountSystemProgram,
    TRemainingAccounts
  >;
}

export type ParsedTakeSnipeInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    systemProgram: TAccountMetas[0];
  };
  data: TakeSnipeInstructionData;
};

export function parseTakeSnipeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedTakeSnipeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
    },
    data: getTakeSnipeInstructionDataDecoder().decode(instruction.data),
  };
}
