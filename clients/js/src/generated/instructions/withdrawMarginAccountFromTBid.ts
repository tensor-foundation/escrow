/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import { TENSOR_ESCROW_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type WithdrawMarginAccountFromTBidInstruction<
  TProgram extends string = typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountTswap extends string | IAccountMeta<string> = string,
  TAccountMarginAccount extends string | IAccountMeta<string> = string,
  TAccountBidState extends string | IAccountMeta<string> = string,
  TAccountOwner extends string | IAccountMeta<string> = string,
  TAccountNftMint extends string | IAccountMeta<string> = string,
  TAccountDestination extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountTswap extends string
        ? ReadonlyAccount<TAccountTswap>
        : TAccountTswap,
      TAccountMarginAccount extends string
        ? WritableAccount<TAccountMarginAccount>
        : TAccountMarginAccount,
      TAccountBidState extends string
        ? ReadonlySignerAccount<TAccountBidState> &
            IAccountSignerMeta<TAccountBidState>
        : TAccountBidState,
      TAccountOwner extends string
        ? ReadonlyAccount<TAccountOwner>
        : TAccountOwner,
      TAccountNftMint extends string
        ? ReadonlyAccount<TAccountNftMint>
        : TAccountNftMint,
      TAccountDestination extends string
        ? WritableAccount<TAccountDestination>
        : TAccountDestination,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type WithdrawMarginAccountFromTBidInstructionData = {
  discriminator: Array<number>;
  bump: number;
  lamports: bigint;
};

export type WithdrawMarginAccountFromTBidInstructionDataArgs = {
  bump: number;
  lamports: number | bigint;
};

export function getWithdrawMarginAccountFromTBidInstructionDataEncoder(): Encoder<WithdrawMarginAccountFromTBidInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getArrayEncoder(getU8Encoder(), { size: 8 })],
      ['bump', getU8Encoder()],
      ['lamports', getU64Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: [186, 26, 199, 134, 220, 177, 32, 72],
    })
  );
}

export function getWithdrawMarginAccountFromTBidInstructionDataDecoder(): Decoder<WithdrawMarginAccountFromTBidInstructionData> {
  return getStructDecoder([
    ['discriminator', getArrayDecoder(getU8Decoder(), { size: 8 })],
    ['bump', getU8Decoder()],
    ['lamports', getU64Decoder()],
  ]);
}

export function getWithdrawMarginAccountFromTBidInstructionDataCodec(): Codec<
  WithdrawMarginAccountFromTBidInstructionDataArgs,
  WithdrawMarginAccountFromTBidInstructionData
> {
  return combineCodec(
    getWithdrawMarginAccountFromTBidInstructionDataEncoder(),
    getWithdrawMarginAccountFromTBidInstructionDataDecoder()
  );
}

export type WithdrawMarginAccountFromTBidInput<
  TAccountTswap extends string = string,
  TAccountMarginAccount extends string = string,
  TAccountBidState extends string = string,
  TAccountOwner extends string = string,
  TAccountNftMint extends string = string,
  TAccountDestination extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  tswap: Address<TAccountTswap>;
  marginAccount: Address<TAccountMarginAccount>;
  bidState: TransactionSigner<TAccountBidState>;
  owner: Address<TAccountOwner>;
  nftMint: Address<TAccountNftMint>;
  destination: Address<TAccountDestination>;
  systemProgram?: Address<TAccountSystemProgram>;
  bump: WithdrawMarginAccountFromTBidInstructionDataArgs['bump'];
  lamports: WithdrawMarginAccountFromTBidInstructionDataArgs['lamports'];
};

export function getWithdrawMarginAccountFromTBidInstruction<
  TAccountTswap extends string,
  TAccountMarginAccount extends string,
  TAccountBidState extends string,
  TAccountOwner extends string,
  TAccountNftMint extends string,
  TAccountDestination extends string,
  TAccountSystemProgram extends string,
>(
  input: WithdrawMarginAccountFromTBidInput<
    TAccountTswap,
    TAccountMarginAccount,
    TAccountBidState,
    TAccountOwner,
    TAccountNftMint,
    TAccountDestination,
    TAccountSystemProgram
  >
): WithdrawMarginAccountFromTBidInstruction<
  typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountTswap,
  TAccountMarginAccount,
  TAccountBidState,
  TAccountOwner,
  TAccountNftMint,
  TAccountDestination,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = TENSOR_ESCROW_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    tswap: { value: input.tswap ?? null, isWritable: false },
    marginAccount: { value: input.marginAccount ?? null, isWritable: true },
    bidState: { value: input.bidState ?? null, isWritable: false },
    owner: { value: input.owner ?? null, isWritable: false },
    nftMint: { value: input.nftMint ?? null, isWritable: false },
    destination: { value: input.destination ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.tswap),
      getAccountMeta(accounts.marginAccount),
      getAccountMeta(accounts.bidState),
      getAccountMeta(accounts.owner),
      getAccountMeta(accounts.nftMint),
      getAccountMeta(accounts.destination),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getWithdrawMarginAccountFromTBidInstructionDataEncoder().encode(
      args as WithdrawMarginAccountFromTBidInstructionDataArgs
    ),
  } as WithdrawMarginAccountFromTBidInstruction<
    typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
    TAccountTswap,
    TAccountMarginAccount,
    TAccountBidState,
    TAccountOwner,
    TAccountNftMint,
    TAccountDestination,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedWithdrawMarginAccountFromTBidInstruction<
  TProgram extends string = typeof TENSOR_ESCROW_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    tswap: TAccountMetas[0];
    marginAccount: TAccountMetas[1];
    bidState: TAccountMetas[2];
    owner: TAccountMetas[3];
    nftMint: TAccountMetas[4];
    destination: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: WithdrawMarginAccountFromTBidInstructionData;
};

export function parseWithdrawMarginAccountFromTBidInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedWithdrawMarginAccountFromTBidInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      tswap: getNextAccount(),
      marginAccount: getNextAccount(),
      bidState: getNextAccount(),
      owner: getNextAccount(),
      nftMint: getNextAccount(),
      destination: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getWithdrawMarginAccountFromTBidInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
