/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  TensorEscrowProgramError,
  TensorEscrowProgramErrorCode,
  getTensorEscrowProgramErrorFromCode,
} from '../errors';
import {
  ParsedAttachPoolToMarginInstruction,
  ParsedBuyNftInstruction,
  ParsedBuyNftT22Instruction,
  ParsedBuyNftWnsInstruction,
  ParsedBuySingleListingInstruction,
  ParsedBuySingleListingT22Instruction,
  ParsedBuySingleListingWnsInstruction,
  ParsedCloseMarginAccountInstruction,
  ParsedClosePoolInstruction,
  ParsedDelistInstruction,
  ParsedDelistT22Instruction,
  ParsedDelistWnsInstruction,
  ParsedDepositMarginAccountInstruction,
  ParsedDepositNftInstruction,
  ParsedDepositNftT22Instruction,
  ParsedDepositNftWnsInstruction,
  ParsedDepositSolInstruction,
  ParsedDetachPoolFromMarginInstruction,
  ParsedEditPoolInPlaceInstruction,
  ParsedEditPoolInstruction,
  ParsedEditSingleListingInstruction,
  ParsedInitMarginAccountInstruction,
  ParsedInitPoolInstruction,
  ParsedInitUpdateTswapInstruction,
  ParsedListInstruction,
  ParsedListT22Instruction,
  ParsedListWnsInstruction,
  ParsedReallocPoolInstruction,
  ParsedSellNftTokenPoolInstruction,
  ParsedSellNftTokenPoolT22Instruction,
  ParsedSellNftTokenPoolWnsInstruction,
  ParsedSellNftTradePoolInstruction,
  ParsedSellNftTradePoolT22Instruction,
  ParsedSellNftTradePoolWnsInstruction,
  ParsedSetPoolFreezeInstruction,
  ParsedTakeSnipeInstruction,
  ParsedWithdrawMarginAccountFromTBidInstruction,
  ParsedWithdrawMarginAccountFromTCompInstruction,
  ParsedWithdrawMarginAccountFromTLockInstruction,
  ParsedWithdrawMarginAccountInstruction,
  ParsedWithdrawMmFeeInstruction,
  ParsedWithdrawNftInstruction,
  ParsedWithdrawNftT22Instruction,
  ParsedWithdrawNftWnsInstruction,
  ParsedWithdrawSolInstruction,
  ParsedWithdrawTswapFeesInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const TENSOR_ESCROW_PROGRAM_ADDRESS =
  'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN' as Address<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'>;

export type TensorEscrowProgram =
  Program<'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN'> &
    ProgramWithErrors<TensorEscrowProgramErrorCode, TensorEscrowProgramError>;

export function getTensorEscrowProgram(): TensorEscrowProgram {
  return {
    name: 'tensorEscrow',
    address: TENSOR_ESCROW_PROGRAM_ADDRESS,
    getErrorFromCode(code: TensorEscrowProgramErrorCode, cause?: Error) {
      return getTensorEscrowProgramErrorFromCode(code, cause);
    },
  };
}

export enum TensorEscrowAccount {
  NftAuthority,
  MarginAccount,
  NftDepositReceipt,
  Pool,
  SingleListing,
  TSwap,
  SolEscrow,
}

export function identifyTensorEscrowAccount(
  account: { data: Uint8Array } | Uint8Array
): TensorEscrowAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, new Uint8Array([194, 127, 219, 16, 219, 18, 250, 12]), 0)) {
    return TensorEscrowAccount.NftAuthority;
  }
  if (
    memcmp(data, new Uint8Array([133, 220, 173, 213, 179, 211, 43, 238]), 0)
  ) {
    return TensorEscrowAccount.MarginAccount;
  }
  if (memcmp(data, new Uint8Array([206, 255, 132, 254, 67, 78, 62, 96]), 0)) {
    return TensorEscrowAccount.NftDepositReceipt;
  }
  if (memcmp(data, new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188]), 0)) {
    return TensorEscrowAccount.Pool;
  }
  if (memcmp(data, new Uint8Array([14, 114, 212, 140, 24, 134, 31, 24]), 0)) {
    return TensorEscrowAccount.SingleListing;
  }
  if (memcmp(data, new Uint8Array([169, 211, 171, 36, 219, 189, 79, 188]), 0)) {
    return TensorEscrowAccount.TSwap;
  }
  if (memcmp(data, new Uint8Array([75, 199, 250, 63, 244, 209, 235, 120]), 0)) {
    return TensorEscrowAccount.SolEscrow;
  }
  throw new Error(
    'The provided account could not be identified as a tensorEscrow account.'
  );
}

export enum TensorEscrowInstruction {
  InitUpdateTswap,
  ReallocPool,
  WithdrawTswapFees,
  InitPool,
  ClosePool,
  DepositNft,
  WithdrawNft,
  DepositSol,
  WithdrawSol,
  BuyNft,
  SellNftTokenPool,
  SellNftTradePool,
  EditPool,
  InitMarginAccount,
  CloseMarginAccount,
  DepositMarginAccount,
  WithdrawMarginAccount,
  AttachPoolToMargin,
  DetachPoolFromMargin,
  SetPoolFreeze,
  TakeSnipe,
  EditPoolInPlace,
  List,
  Delist,
  BuySingleListing,
  EditSingleListing,
  WithdrawMmFee,
  WithdrawMarginAccountFromTBid,
  WithdrawMarginAccountCpiTamm,
  WithdrawMarginAccountFromTComp,
  WithdrawMarginAccountFromTLock,
  BuyNftT22,
  DepositNftT22,
  SellNftTokenPoolT22,
  SellNftTradePoolT22,
  WithdrawNftT22,
  BuySingleListingT22,
  ListT22,
  DelistT22,
  BuyNftWns,
  DepositNftWns,
  SellNftTokenPoolWns,
  SellNftTradePoolWns,
  WithdrawNftWns,
  BuySingleListingWns,
  ListWns,
  DelistWns,
}

export function identifyTensorEscrowInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): TensorEscrowInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, new Uint8Array([140, 185, 54, 172, 15, 94, 31, 155]), 0)) {
    return TensorEscrowInstruction.InitUpdateTswap;
  }
  if (memcmp(data, new Uint8Array([114, 128, 37, 167, 71, 227, 40, 178]), 0)) {
    return TensorEscrowInstruction.ReallocPool;
  }
  if (
    memcmp(data, new Uint8Array([27, 229, 128, 105, 115, 125, 180, 151]), 0)
  ) {
    return TensorEscrowInstruction.WithdrawTswapFees;
  }
  if (
    memcmp(data, new Uint8Array([116, 233, 199, 204, 115, 159, 171, 36]), 0)
  ) {
    return TensorEscrowInstruction.InitPool;
  }
  if (memcmp(data, new Uint8Array([140, 189, 209, 23, 239, 62, 239, 11]), 0)) {
    return TensorEscrowInstruction.ClosePool;
  }
  if (memcmp(data, new Uint8Array([93, 226, 132, 166, 141, 9, 48, 101]), 0)) {
    return TensorEscrowInstruction.DepositNft;
  }
  if (
    memcmp(data, new Uint8Array([142, 181, 191, 149, 82, 175, 216, 100]), 0)
  ) {
    return TensorEscrowInstruction.WithdrawNft;
  }
  if (memcmp(data, new Uint8Array([108, 81, 78, 117, 125, 155, 56, 200]), 0)) {
    return TensorEscrowInstruction.DepositSol;
  }
  if (memcmp(data, new Uint8Array([145, 131, 74, 136, 65, 137, 42, 38]), 0)) {
    return TensorEscrowInstruction.WithdrawSol;
  }
  if (memcmp(data, new Uint8Array([96, 0, 28, 190, 49, 107, 83, 222]), 0)) {
    return TensorEscrowInstruction.BuyNft;
  }
  if (memcmp(data, new Uint8Array([57, 44, 192, 48, 83, 8, 107, 48]), 0)) {
    return TensorEscrowInstruction.SellNftTokenPool;
  }
  if (memcmp(data, new Uint8Array([131, 82, 125, 77, 13, 157, 36, 90]), 0)) {
    return TensorEscrowInstruction.SellNftTradePool;
  }
  if (memcmp(data, new Uint8Array([50, 174, 34, 36, 3, 166, 29, 204]), 0)) {
    return TensorEscrowInstruction.EditPool;
  }
  if (memcmp(data, new Uint8Array([10, 54, 68, 252, 130, 97, 39, 52]), 0)) {
    return TensorEscrowInstruction.InitMarginAccount;
  }
  if (memcmp(data, new Uint8Array([105, 215, 41, 239, 166, 207, 1, 103]), 0)) {
    return TensorEscrowInstruction.CloseMarginAccount;
  }
  if (memcmp(data, new Uint8Array([190, 85, 242, 60, 119, 81, 33, 192]), 0)) {
    return TensorEscrowInstruction.DepositMarginAccount;
  }
  if (memcmp(data, new Uint8Array([54, 73, 150, 208, 207, 5, 18, 17]), 0)) {
    return TensorEscrowInstruction.WithdrawMarginAccount;
  }
  if (memcmp(data, new Uint8Array([187, 105, 211, 137, 224, 59, 29, 227]), 0)) {
    return TensorEscrowInstruction.AttachPoolToMargin;
  }
  if (memcmp(data, new Uint8Array([182, 54, 73, 38, 188, 87, 185, 101]), 0)) {
    return TensorEscrowInstruction.DetachPoolFromMargin;
  }
  if (
    memcmp(data, new Uint8Array([110, 201, 190, 64, 166, 186, 105, 131]), 0)
  ) {
    return TensorEscrowInstruction.SetPoolFreeze;
  }
  if (memcmp(data, new Uint8Array([10, 151, 48, 226, 248, 24, 227, 231]), 0)) {
    return TensorEscrowInstruction.TakeSnipe;
  }
  if (memcmp(data, new Uint8Array([125, 191, 119, 113, 6, 14, 164, 23]), 0)) {
    return TensorEscrowInstruction.EditPoolInPlace;
  }
  if (memcmp(data, new Uint8Array([54, 174, 193, 67, 17, 41, 132, 38]), 0)) {
    return TensorEscrowInstruction.List;
  }
  if (memcmp(data, new Uint8Array([55, 136, 205, 107, 107, 173, 4, 31]), 0)) {
    return TensorEscrowInstruction.Delist;
  }
  if (memcmp(data, new Uint8Array([245, 220, 105, 73, 117, 98, 78, 141]), 0)) {
    return TensorEscrowInstruction.BuySingleListing;
  }
  if (memcmp(data, new Uint8Array([88, 38, 236, 212, 31, 185, 18, 166]), 0)) {
    return TensorEscrowInstruction.EditSingleListing;
  }
  if (
    memcmp(data, new Uint8Array([54, 150, 129, 126, 135, 205, 149, 120]), 0)
  ) {
    return TensorEscrowInstruction.WithdrawMmFee;
  }
  if (memcmp(data, new Uint8Array([186, 26, 199, 134, 220, 177, 32, 72]), 0)) {
    return TensorEscrowInstruction.WithdrawMarginAccountFromTBid;
  }
  if (memcmp(data, new Uint8Array([35, 89, 16, 235, 226, 89, 248, 45]), 0)) {
    return TensorEscrowInstruction.WithdrawMarginAccountCpiTamm;
  }
  if (memcmp(data, new Uint8Array([201, 156, 163, 27, 243, 14, 36, 237]), 0)) {
    return TensorEscrowInstruction.WithdrawMarginAccountFromTComp;
  }
  if (
    memcmp(data, new Uint8Array([207, 235, 166, 255, 163, 162, 149, 44]), 0)
  ) {
    return TensorEscrowInstruction.WithdrawMarginAccountFromTLock;
  }
  if (memcmp(data, new Uint8Array([155, 219, 126, 245, 170, 199, 51, 79]), 0)) {
    return TensorEscrowInstruction.BuyNftT22;
  }
  if (memcmp(data, new Uint8Array([208, 34, 6, 147, 95, 218, 49, 160]), 0)) {
    return TensorEscrowInstruction.DepositNftT22;
  }
  if (memcmp(data, new Uint8Array([149, 234, 31, 103, 26, 36, 166, 49]), 0)) {
    return TensorEscrowInstruction.SellNftTokenPoolT22;
  }
  if (memcmp(data, new Uint8Array([124, 145, 23, 52, 72, 113, 85, 9]), 0)) {
    return TensorEscrowInstruction.SellNftTradePoolT22;
  }
  if (memcmp(data, new Uint8Array([112, 55, 80, 231, 181, 190, 92, 12]), 0)) {
    return TensorEscrowInstruction.WithdrawNftT22;
  }
  if (memcmp(data, new Uint8Array([102, 89, 66, 0, 5, 68, 84, 216]), 0)) {
    return TensorEscrowInstruction.BuySingleListingT22;
  }
  if (memcmp(data, new Uint8Array([9, 117, 93, 230, 221, 4, 199, 212]), 0)) {
    return TensorEscrowInstruction.ListT22;
  }
  if (memcmp(data, new Uint8Array([216, 72, 73, 18, 204, 82, 123, 26]), 0)) {
    return TensorEscrowInstruction.DelistT22;
  }
  if (memcmp(data, new Uint8Array([216, 253, 106, 29, 182, 243, 0, 78]), 0)) {
    return TensorEscrowInstruction.BuyNftWns;
  }
  if (memcmp(data, new Uint8Array([245, 148, 241, 58, 13, 253, 40, 195]), 0)) {
    return TensorEscrowInstruction.DepositNftWns;
  }
  if (memcmp(data, new Uint8Array([40, 78, 241, 78, 204, 238, 46, 143]), 0)) {
    return TensorEscrowInstruction.SellNftTokenPoolWns;
  }
  if (memcmp(data, new Uint8Array([169, 175, 125, 88, 1, 16, 130, 7]), 0)) {
    return TensorEscrowInstruction.SellNftTradePoolWns;
  }
  if (memcmp(data, new Uint8Array([51, 152, 143, 163, 1, 238, 156, 119]), 0)) {
    return TensorEscrowInstruction.WithdrawNftWns;
  }
  if (memcmp(data, new Uint8Array([28, 14, 132, 207, 212, 248, 121, 199]), 0)) {
    return TensorEscrowInstruction.BuySingleListingWns;
  }
  if (
    memcmp(data, new Uint8Array([212, 193, 161, 215, 128, 43, 190, 204]), 0)
  ) {
    return TensorEscrowInstruction.ListWns;
  }
  if (
    memcmp(data, new Uint8Array([131, 226, 161, 134, 233, 132, 243, 159]), 0)
  ) {
    return TensorEscrowInstruction.DelistWns;
  }
  throw new Error(
    'The provided instruction could not be identified as a tensorEscrow instruction.'
  );
}

export type ParsedTensorEscrowInstruction<
  TProgram extends string = 'TSWAPaqyCSx2KABk68Shruf4rp7CxcNi8hAsbdwmHbN',
> =
  | ({
      instructionType: TensorEscrowInstruction.InitUpdateTswap;
    } & ParsedInitUpdateTswapInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.ReallocPool;
    } & ParsedReallocPoolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawTswapFees;
    } & ParsedWithdrawTswapFeesInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.InitPool;
    } & ParsedInitPoolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.ClosePool;
    } & ParsedClosePoolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DepositNft;
    } & ParsedDepositNftInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawNft;
    } & ParsedWithdrawNftInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DepositSol;
    } & ParsedDepositSolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawSol;
    } & ParsedWithdrawSolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.BuyNft;
    } & ParsedBuyNftInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SellNftTokenPool;
    } & ParsedSellNftTokenPoolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SellNftTradePool;
    } & ParsedSellNftTradePoolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.EditPool;
    } & ParsedEditPoolInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.InitMarginAccount;
    } & ParsedInitMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.CloseMarginAccount;
    } & ParsedCloseMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DepositMarginAccount;
    } & ParsedDepositMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawMarginAccount;
    } & ParsedWithdrawMarginAccountInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.AttachPoolToMargin;
    } & ParsedAttachPoolToMarginInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DetachPoolFromMargin;
    } & ParsedDetachPoolFromMarginInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SetPoolFreeze;
    } & ParsedSetPoolFreezeInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.TakeSnipe;
    } & ParsedTakeSnipeInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.EditPoolInPlace;
    } & ParsedEditPoolInPlaceInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.List;
    } & ParsedListInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.Delist;
    } & ParsedDelistInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.BuySingleListing;
    } & ParsedBuySingleListingInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.EditSingleListing;
    } & ParsedEditSingleListingInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawMmFee;
    } & ParsedWithdrawMmFeeInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawMarginAccountFromTBid;
    } & ParsedWithdrawMarginAccountFromTBidInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawMarginAccountFromTComp;
    } & ParsedWithdrawMarginAccountFromTCompInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawMarginAccountFromTLock;
    } & ParsedWithdrawMarginAccountFromTLockInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.BuyNftT22;
    } & ParsedBuyNftT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DepositNftT22;
    } & ParsedDepositNftT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SellNftTokenPoolT22;
    } & ParsedSellNftTokenPoolT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SellNftTradePoolT22;
    } & ParsedSellNftTradePoolT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawNftT22;
    } & ParsedWithdrawNftT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.BuySingleListingT22;
    } & ParsedBuySingleListingT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.ListT22;
    } & ParsedListT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DelistT22;
    } & ParsedDelistT22Instruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.BuyNftWns;
    } & ParsedBuyNftWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DepositNftWns;
    } & ParsedDepositNftWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SellNftTokenPoolWns;
    } & ParsedSellNftTokenPoolWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.SellNftTradePoolWns;
    } & ParsedSellNftTradePoolWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.WithdrawNftWns;
    } & ParsedWithdrawNftWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.BuySingleListingWns;
    } & ParsedBuySingleListingWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.ListWns;
    } & ParsedListWnsInstruction<TProgram>)
  | ({
      instructionType: TensorEscrowInstruction.DelistWns;
    } & ParsedDelistWnsInstruction<TProgram>);
