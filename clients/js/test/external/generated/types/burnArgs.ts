/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';

export type BurnArgs = { __kind: 'V1'; amount: bigint };

export type BurnArgsArgs = { __kind: 'V1'; amount?: number | bigint };

export function getBurnArgsEncoder() {
  return getDataEnumEncoder<BurnArgsArgs>([
    [
      'V1',
      mapEncoder(
        getStructEncoder<{ amount: number | bigint }>([
          ['amount', getU64Encoder()],
        ]),
        (value) => ({ ...value, amount: value.amount ?? 1 })
      ),
    ],
  ]) satisfies Encoder<BurnArgsArgs>;
}

export function getBurnArgsDecoder() {
  return getDataEnumDecoder<BurnArgs>([
    [
      'V1',
      getStructDecoder<GetDataEnumKindContent<BurnArgs, 'V1'>>([
        ['amount', getU64Decoder()],
      ]),
    ],
  ]) satisfies Decoder<BurnArgs>;
}

export function getBurnArgsCodec(): Codec<BurnArgsArgs, BurnArgs> {
  return combineCodec(getBurnArgsEncoder(), getBurnArgsDecoder());
}

// Data Enum Helpers.
export function burnArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<BurnArgsArgs, 'V1'>
): GetDataEnumKind<BurnArgsArgs, 'V1'>;
export function burnArgs<K extends BurnArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<BurnArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isBurnArgs<K extends BurnArgs['__kind']>(
  kind: K,
  value: BurnArgs
): value is BurnArgs & { __kind: K } {
  return value.__kind === kind;
}
