/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
} from '@solana/codecs-data-structures';
import { getU64Decoder, getU64Encoder } from '@solana/codecs-numbers';
import {
  ProofInfo,
  ProofInfoArgs,
  SeedsVec,
  SeedsVecArgs,
  getProofInfoDecoder,
  getProofInfoEncoder,
  getSeedsVecDecoder,
  getSeedsVecEncoder,
} from '.';

export type PayloadType =
  | { __kind: 'Pubkey'; fields: [Address] }
  | { __kind: 'Seeds'; fields: [SeedsVec] }
  | { __kind: 'MerkleProof'; fields: [ProofInfo] }
  | { __kind: 'Number'; fields: [bigint] };

export type PayloadTypeArgs =
  | { __kind: 'Pubkey'; fields: [Address] }
  | { __kind: 'Seeds'; fields: [SeedsVecArgs] }
  | { __kind: 'MerkleProof'; fields: [ProofInfoArgs] }
  | { __kind: 'Number'; fields: [number | bigint] };

export function getPayloadTypeEncoder() {
  return getDataEnumEncoder<PayloadTypeArgs>([
    [
      'Pubkey',
      getStructEncoder<GetDataEnumKindContent<PayloadTypeArgs, 'Pubkey'>>([
        ['fields', getTupleEncoder([getAddressEncoder()])],
      ]),
    ],
    [
      'Seeds',
      getStructEncoder<GetDataEnumKindContent<PayloadTypeArgs, 'Seeds'>>([
        ['fields', getTupleEncoder([getSeedsVecEncoder()])],
      ]),
    ],
    [
      'MerkleProof',
      getStructEncoder<GetDataEnumKindContent<PayloadTypeArgs, 'MerkleProof'>>([
        ['fields', getTupleEncoder([getProofInfoEncoder()])],
      ]),
    ],
    [
      'Number',
      getStructEncoder<GetDataEnumKindContent<PayloadTypeArgs, 'Number'>>([
        ['fields', getTupleEncoder([getU64Encoder()])],
      ]),
    ],
  ]) satisfies Encoder<PayloadTypeArgs>;
}

export function getPayloadTypeDecoder() {
  return getDataEnumDecoder<PayloadType>([
    [
      'Pubkey',
      getStructDecoder<GetDataEnumKindContent<PayloadType, 'Pubkey'>>([
        ['fields', getTupleDecoder([getAddressDecoder()])],
      ]),
    ],
    [
      'Seeds',
      getStructDecoder<GetDataEnumKindContent<PayloadType, 'Seeds'>>([
        ['fields', getTupleDecoder([getSeedsVecDecoder()])],
      ]),
    ],
    [
      'MerkleProof',
      getStructDecoder<GetDataEnumKindContent<PayloadType, 'MerkleProof'>>([
        ['fields', getTupleDecoder([getProofInfoDecoder()])],
      ]),
    ],
    [
      'Number',
      getStructDecoder<GetDataEnumKindContent<PayloadType, 'Number'>>([
        ['fields', getTupleDecoder([getU64Decoder()])],
      ]),
    ],
  ]) satisfies Decoder<PayloadType>;
}

export function getPayloadTypeCodec(): Codec<PayloadTypeArgs, PayloadType> {
  return combineCodec(getPayloadTypeEncoder(), getPayloadTypeDecoder());
}

// Data Enum Helpers.
export function payloadType(
  kind: 'Pubkey',
  data: GetDataEnumKindContent<PayloadTypeArgs, 'Pubkey'>['fields']
): GetDataEnumKind<PayloadTypeArgs, 'Pubkey'>;
export function payloadType(
  kind: 'Seeds',
  data: GetDataEnumKindContent<PayloadTypeArgs, 'Seeds'>['fields']
): GetDataEnumKind<PayloadTypeArgs, 'Seeds'>;
export function payloadType(
  kind: 'MerkleProof',
  data: GetDataEnumKindContent<PayloadTypeArgs, 'MerkleProof'>['fields']
): GetDataEnumKind<PayloadTypeArgs, 'MerkleProof'>;
export function payloadType(
  kind: 'Number',
  data: GetDataEnumKindContent<PayloadTypeArgs, 'Number'>['fields']
): GetDataEnumKind<PayloadTypeArgs, 'Number'>;
export function payloadType<K extends PayloadTypeArgs['__kind']>(
  kind: K,
  data?: any
): Extract<PayloadTypeArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPayloadType<K extends PayloadType['__kind']>(
  kind: K,
  value: PayloadType
): value is PayloadType & { __kind: K } {
  return value.__kind === kind;
}
