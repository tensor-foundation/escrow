/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import { Codec, Decoder, Encoder, combineCodec } from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getUnitDecoder,
  getUnitEncoder,
} from '@solana/codecs-data-structures';

export type RuleSetToggle =
  | { __kind: 'None' }
  | { __kind: 'Clear' }
  | { __kind: 'Set'; fields: [Address] };

export type RuleSetToggleArgs = RuleSetToggle;

export function getRuleSetToggleEncoder() {
  return getDataEnumEncoder<RuleSetToggleArgs>([
    ['None', getUnitEncoder()],
    ['Clear', getUnitEncoder()],
    [
      'Set',
      getStructEncoder<GetDataEnumKindContent<RuleSetToggleArgs, 'Set'>>([
        ['fields', getTupleEncoder([getAddressEncoder()])],
      ]),
    ],
  ]) satisfies Encoder<RuleSetToggleArgs>;
}

export function getRuleSetToggleDecoder() {
  return getDataEnumDecoder<RuleSetToggle>([
    ['None', getUnitDecoder()],
    ['Clear', getUnitDecoder()],
    [
      'Set',
      getStructDecoder<GetDataEnumKindContent<RuleSetToggle, 'Set'>>([
        ['fields', getTupleDecoder([getAddressDecoder()])],
      ]),
    ],
  ]) satisfies Decoder<RuleSetToggle>;
}

export function getRuleSetToggleCodec(): Codec<
  RuleSetToggleArgs,
  RuleSetToggle
> {
  return combineCodec(getRuleSetToggleEncoder(), getRuleSetToggleDecoder());
}

// Data Enum Helpers.
export function ruleSetToggle(
  kind: 'None'
): GetDataEnumKind<RuleSetToggleArgs, 'None'>;
export function ruleSetToggle(
  kind: 'Clear'
): GetDataEnumKind<RuleSetToggleArgs, 'Clear'>;
export function ruleSetToggle(
  kind: 'Set',
  data: GetDataEnumKindContent<RuleSetToggleArgs, 'Set'>['fields']
): GetDataEnumKind<RuleSetToggleArgs, 'Set'>;
export function ruleSetToggle<K extends RuleSetToggleArgs['__kind']>(
  kind: K,
  data?: any
): Extract<RuleSetToggleArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isRuleSetToggle<K extends RuleSetToggle['__kind']>(
  kind: K,
  value: RuleSetToggle
): value is RuleSetToggle & { __kind: K } {
  return value.__kind === kind;
}
