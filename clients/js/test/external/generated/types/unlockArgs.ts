/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  GetDataEnumKind,
  GetDataEnumKindContent,
  getDataEnumDecoder,
  getDataEnumEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import {
  Option,
  OptionOrNullable,
  getOptionDecoder,
  getOptionEncoder,
  none,
} from '@solana/options';
import {
  AuthorizationData,
  AuthorizationDataArgs,
  getAuthorizationDataDecoder,
  getAuthorizationDataEncoder,
} from '.';

export type UnlockArgs = {
  __kind: 'V1';
  authorizationData: Option<AuthorizationData>;
};

export type UnlockArgsArgs = {
  __kind: 'V1';
  authorizationData?: OptionOrNullable<AuthorizationDataArgs>;
};

export function getUnlockArgsEncoder() {
  return getDataEnumEncoder<UnlockArgsArgs>([
    [
      'V1',
      mapEncoder(
        getStructEncoder<{
          authorizationData: OptionOrNullable<AuthorizationDataArgs>;
        }>([
          [
            'authorizationData',
            getOptionEncoder(getAuthorizationDataEncoder()),
          ],
        ]),
        (value) => ({
          ...value,
          authorizationData: value.authorizationData ?? none(),
        })
      ),
    ],
  ]) satisfies Encoder<UnlockArgsArgs>;
}

export function getUnlockArgsDecoder() {
  return getDataEnumDecoder<UnlockArgs>([
    [
      'V1',
      getStructDecoder<GetDataEnumKindContent<UnlockArgs, 'V1'>>([
        ['authorizationData', getOptionDecoder(getAuthorizationDataDecoder())],
      ]),
    ],
  ]) satisfies Decoder<UnlockArgs>;
}

export function getUnlockArgsCodec(): Codec<UnlockArgsArgs, UnlockArgs> {
  return combineCodec(getUnlockArgsEncoder(), getUnlockArgsDecoder());
}

// Data Enum Helpers.
export function unlockArgs(
  kind: 'V1',
  data: GetDataEnumKindContent<UnlockArgsArgs, 'V1'>
): GetDataEnumKind<UnlockArgsArgs, 'V1'>;
export function unlockArgs<K extends UnlockArgsArgs['__kind']>(
  kind: K,
  data?: any
): Extract<UnlockArgsArgs, { __kind: K }> {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isUnlockArgs<K extends UnlockArgs['__kind']>(
  kind: K,
  value: UnlockArgs
): value is UnlockArgs & { __kind: K } {
  return value.__kind === kind;
}
