/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
} from '@solana/web3.js';
import { type ParsedWithdrawFromMarginInstruction } from '../instructions';

export const MARGIN_WITHDRAW_CPI_PROGRAM_ADDRESS =
  '6yJwyDaYK2q9gMLtRnJukEpskKsNzMAqiCRikRaP2g1F' as Address<'6yJwyDaYK2q9gMLtRnJukEpskKsNzMAqiCRikRaP2g1F'>;

export enum MarginWithdrawCpiAccount {
  Pool,
}

export function identifyMarginWithdrawCpiAccount(
  account: { data: Uint8Array } | Uint8Array
): MarginWithdrawCpiAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([241, 154, 109, 4, 17, 177, 109, 188])
      ),
      0
    )
  ) {
    return MarginWithdrawCpiAccount.Pool;
  }
  throw new Error(
    'The provided account could not be identified as a marginWithdrawCpi account.'
  );
}

export enum MarginWithdrawCpiInstruction {
  WithdrawFromMargin,
}

export function identifyMarginWithdrawCpiInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): MarginWithdrawCpiInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([128, 122, 127, 176, 54, 230, 182, 95])
      ),
      0
    )
  ) {
    return MarginWithdrawCpiInstruction.WithdrawFromMargin;
  }
  throw new Error(
    'The provided instruction could not be identified as a marginWithdrawCpi instruction.'
  );
}

export type ParsedMarginWithdrawCpiInstruction<
  TProgram extends string = '6yJwyDaYK2q9gMLtRnJukEpskKsNzMAqiCRikRaP2g1F',
> = {
  instructionType: MarginWithdrawCpiInstruction.WithdrawFromMargin;
} & ParsedWithdrawFromMarginInstruction<TProgram>;
