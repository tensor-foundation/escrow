//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use crate::generated::types::Frozen;
use crate::generated::types::PoolConfig;
use crate::generated::types::PoolStats;
use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Pool {
    pub discriminator: [u8; 8],
    pub version: u8,
    pub bump: [u8; 1],
    pub sol_escrow_bump: [u8; 1],
    /// Unix timestamp in seconds when pool was created
    pub created_unix_seconds: i64,
    pub config: PoolConfig,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub tswap: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub owner: Pubkey,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub whitelist: Pubkey,
    /// Used by Trade / Token pools only, but always initiated
    /// Amount to spend is implied by balance - rent
    /// (!) for margin accounts this should always be empty EXCEPT when we move frozen amount in
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub sol_escrow: Pubkey,
    /// How many times a taker has SOLD into the pool
    pub taker_sell_count: u32,
    /// How many times a taker has BOUGHT from the pool
    pub taker_buy_count: u32,
    pub nfts_held: u32,
    #[cfg_attr(
        feature = "serde",
        serde(with = "serde_with::As::<serde_with::DisplayFromStr>")
    )]
    pub nft_authority: Pubkey,
    /// All stats incorporate both 1)carried over and 2)current data
    pub stats: PoolStats,
    /// If margin account present, means it's a marginated pool (currently bids only)
    pub margin: Option<Pubkey>,
    /// Offchain actor signs off to make sure an offchain condition is met (eg trait present)
    pub is_cosigned: bool,
    /// Order type for indexing ease (anchor enums annoying, so using a u8)
    /// 0 = standard, 1 = sniping (in the future eg 2 = take profit, etc)
    pub order_type: u8,
    /// Order is being executed by an offchain party and can't be modified at this time
    /// incl. deposit/withdraw/edit/close/buy/sell
    pub frozen: Option<Frozen>,
    /// Last time a buy or sell order has been executed
    pub last_transacted_seconds: i64,
    /// Limit how many buys a pool can execute - useful for cross-margin, else keeps buying into infinity
    pub max_taker_sell_count: u32,
}

impl Pool {
    #[inline(always)]
    pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
        let mut data = data;
        Self::deserialize(&mut data)
    }
}

impl<'a> TryFrom<&solana_program::account_info::AccountInfo<'a>> for Pool {
    type Error = std::io::Error;

    fn try_from(
        account_info: &solana_program::account_info::AccountInfo<'a>,
    ) -> Result<Self, Self::Error> {
        let mut data: &[u8] = &(*account_info.data).borrow();
        Self::deserialize(&mut data)
    }
}
