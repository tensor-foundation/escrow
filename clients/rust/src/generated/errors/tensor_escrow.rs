//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use num_derive::FromPrimitive;
use thiserror::Error;

#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum TensorEscrowError {
    /// 6000 (0x1770) - invalid merkle proof, token not whitelisted
    #[error("invalid merkle proof, token not whitelisted")]
    InvalidProof,
    /// 6001 (0x1771) - whitelist not verified -- currently only verified pools supported
    #[error("whitelist not verified -- currently only verified pools supported")]
    WhitelistNotVerified,
    /// 6002 (0x1772) - unexpected whitelist address
    #[error("unexpected whitelist address")]
    BadWhitelist,
    /// 6003 (0x1773) - operation not permitted on this pool type
    #[error("operation not permitted on this pool type")]
    WrongPoolType,
    /// 6004 (0x1774) - fee account doesn't match that stored on pool
    #[error("fee account doesn't match that stored on pool")]
    BadFeeAccount,
    /// 6005 (0x1775) - escrow account doesn't match that stored on pool
    #[error("escrow account doesn't match that stored on pool")]
    BadEscrowAccount,
    /// 6006 (0x1776) - when setting up a Trade pool, must provide fee bps & fee vault
    #[error("when setting up a Trade pool, must provide fee bps & fee vault")]
    MissingFees,
    /// 6007 (0x1777) - fees entered above allowed threshold
    #[error("fees entered above allowed threshold")]
    FeesTooHigh,
    /// 6008 (0x1778) - delta too large
    #[error("delta too large")]
    DeltaTooLarge,
    /// 6009 (0x1779) - arithmetic error
    #[error("arithmetic error")]
    ArithmeticError,
    /// 6010 (0x177A) - this nft doesnt belong to this pool
    #[error("this nft doesnt belong to this pool")]
    WrongPool,
    /// 6011 (0x177B) - royalties are enabled always
    #[error("royalties are enabled always")]
    RoyaltiesEnabled,
    /// 6012 (0x177C) - specified price not within current price
    #[error("specified price not within current price")]
    PriceMismatch,
    /// 6013 (0x177D) - cannot close pool with nfts in escrow -- withdraw all before closing
    #[error("cannot close pool with nfts in escrow -- withdraw all before closing")]
    ExistingNfts,
    /// 6014 (0x177E) - wrong mint passed for provided accounts
    #[error("wrong mint passed for provided accounts")]
    WrongMint,
    /// 6015 (0x177F) - insufficient Tswap account balance
    #[error("insufficient Tswap account balance")]
    InsufficientTswapAccBalance,
    /// 6016 (0x1780) - bad owner
    #[error("bad owner")]
    BadOwner,
    /// 6017 (0x1781) - fees not allowed for non-trade pools
    #[error("fees not allowed for non-trade pools")]
    FeesNotAllowed,
    /// 6018 (0x1782) - metadata account does not match
    #[error("metadata account does not match")]
    BadMetadata,
    /// 6019 (0x1783) - provided creator address does not match metadata creator
    #[error("provided creator address does not match metadata creator")]
    CreatorMismatch,
    /// 6020 (0x1784) - wrong pool version provided
    #[error("wrong pool version provided")]
    WrongPoolVersion,
    /// 6021 (0x1785) - new pool should not match old pool
    #[error("new pool should not match old pool")]
    PoolsAreTheSame,
    /// 6022 (0x1786) - wrong nft authority account provided
    #[error("wrong nft authority account provided")]
    WrongAuthority,
    /// 6023 (0x1787) - amount frozen doesnt match current price
    #[error("amount frozen doesnt match current price")]
    FrozenAmountMismatch,
    /// 6024 (0x1788) - mint proof account does not match
    #[error("mint proof account does not match")]
    BadMintProof,
    /// 6025 (0x1789) - bad cosigner passed - either wrong key or no signature
    #[error("bad cosigner passed - either wrong key or no signature")]
    BadCosigner,
    /// 6026 (0x178A) - pool is frozen and cannot execute normal operations
    #[error("pool is frozen and cannot execute normal operations")]
    PoolFrozen,
    /// 6027 (0x178B) - bad margin account passed
    #[error("bad margin account passed")]
    BadMargin,
    /// 6028 (0x178C) - expected a marginated pool to be passed in
    #[error("expected a marginated pool to be passed in")]
    PoolNotMarginated,
    /// 6029 (0x178D) - expected a non-marginated pool to be passed in
    #[error("expected a non-marginated pool to be passed in")]
    PoolMarginated,
    /// 6030 (0x178E) - wrong order type
    #[error("wrong order type")]
    WrongOrderType,
    /// 6031 (0x178F) - wrong frozen status
    #[error("wrong frozen status")]
    WrongFrozenStatus,
    /// 6032 (0x1790) - margin account has pools open and is in use
    #[error("margin account has pools open and is in use")]
    MarginInUse,
    /// 6033 (0x1791) - max taker sell count exceeded, pool cannot buy anymore NFTs
    #[error("max taker sell count exceeded, pool cannot buy anymore NFTs")]
    MaxTakerSellCountExceeded,
    /// 6034 (0x1792) - max taker sell count is too small
    #[error("max taker sell count is too small")]
    MaxTakerSellCountTooSmall,
    /// 6035 (0x1793) - rule set for programmable nft does not match
    #[error("rule set for programmable nft does not match")]
    BadRuleSet,
    /// 6036 (0x1794) - this pool compounds fees and they cannot be withdrawn separately
    #[error("this pool compounds fees and they cannot be withdrawn separately")]
    PoolFeesCompounded,
    /// 6037 (0x1795) - royalties percentage passed in must be between 0 and 100
    #[error("royalties percentage passed in must be between 0 and 100")]
    BadRoyaltiesPct,
    /// 6038 (0x1796) - starting price can't be smaller than 1 lamport
    #[error("starting price can't be smaller than 1 lamport")]
    StartingPriceTooSmall,
}

impl solana_program::program_error::PrintProgramError for TensorEscrowError {
    fn print<E>(&self) {
        solana_program::msg!(&self.to_string());
    }
}
